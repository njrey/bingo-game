[{"/Users/nolanreynolds/Programming/react/bingo-game-2/bingo-game/src/index.tsx":"1","/Users/nolanreynolds/Programming/react/bingo-game-2/bingo-game/src/reportWebVitals.ts":"2","/Users/nolanreynolds/Programming/react/bingo-game-2/bingo-game/src/App.tsx":"3"},{"size":500,"mtime":1610832059896,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1610832059897,"results":"6","hashOfConfig":"5"},{"size":4899,"mtime":1611111955385,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"fhjjy",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/nolanreynolds/Programming/react/bingo-game-2/bingo-game/src/index.tsx",[],["16","17"],"/Users/nolanreynolds/Programming/react/bingo-game-2/bingo-game/src/reportWebVitals.ts",[],"/Users/nolanreynolds/Programming/react/bingo-game-2/bingo-game/src/App.tsx",["18"],"import { Component, ChangeEvent } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BingoGame />\n    </div>\n  );\n}\nclass BingoGame extends Component<{}, { tileList: Array<string> }> {\n  constructor(props: any) {\n    super(props);\n    this.handleTilesTextChange = this.handleTilesTextChange.bind(this);\n    this.state = {\n      tileList: [],\n    };\n  }\n  handleTilesTextChange(tileTextArr: string[]) {\n    this.setState({ tileList: tileTextArr });\n  }\n\n  render() {\n    return (\n      <div className=\"bingo-game\">\n        <BoardSetup handleTilesTextChange={this.handleTilesTextChange} />\n        <BoardGrid tileList={this.state.tileList} />\n      </div>\n    );\n  }\n}\nclass BoardGrid extends Component<{ tileList: Array<string> }, {}> {\n  constructor(props: any) {\n    super(props);\n    this.state = { tileList: [] };\n    this.getRandomInt = this.getRandomInt.bind(this);\n  }\n\n  getRandomInt(max: number) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  shuffle(arr: Array<any>) {\n    let x = arr.length;\n    let j = 0;\n    let temp = [];\n\n    while (x--) {\n      j = Math.floor(Math.random() * (x + 1));\n      temp = arr[x];\n      arr[x] = arr[j];\n      arr[j] = temp;\n    }\n    let freeSpaceIndex = arr.indexOf(\"free space\");\n    if (freeSpaceIndex >= 0) {\n      console.log(\"free!\");\n      let temp = arr[12];\n      arr[12] = \"free space\";\n      arr[freeSpaceIndex] = temp;\n    }\n    return arr;\n  }\n  createBoardArray(arr: string[]): string[][] {\n    let board: string[][] = [[], [], [], [], []];\n    let arrIndex = 0;\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board.length; j++) {\n        board[i][j] = arr[arrIndex];\n        arrIndex++;\n      }\n    }\n    return board;\n    // return board.map((boardItem, index) => {\n    //   for (let i = 0; i < board.length; i++) {\n    //     boardItem[index] = arr[arrIndex];\n    //     arrIndex++;\n    //   }\n    //   return boardItem;\n    // });\n  }\n  render() {\n    if (this.props.tileList.length !== 25) {\n      return <div>Create a board!</div>;\n    }\n    let tileText: string[] = this.props.tileList;\n    let gameBoard: Array<Array<string>> = this.createBoardArray(\n      this.shuffle(this.props.tileList)\n    );\n    console.log(\"board\");\n    console.log(gameBoard);\n\n    for (let i = 0; i < this.props.tileList.length; i++) {\n      // console.log(this.props.tileList[i]);\n    }\n\n    return (\n      <div className=\"board\">\n        <h1>Bingo</h1>\n        <div className=\"board-row\">\n          {gameBoard[0].map((square) => (\n            <Square tileText={square} />\n          ))}\n        </div>\n        <div className=\"board-row\">\n          {gameBoard[1].map((square) => (\n            <Square tileText={square} />\n          ))}\n        </div>\n        <div className=\"board-row\">\n          {gameBoard[2].map((square) => (\n            <Square tileText={square} />\n          ))}\n        </div>\n        <div className=\"board-row\">\n          {gameBoard[3].map((square) => (\n            <Square tileText={square} />\n          ))}\n        </div>\n        <div className=\"board-row\">\n          {gameBoard[4].map((square) => (\n            <Square tileText={square} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nclass Square extends Component<{ tileText: string }, { occupied: boolean }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      occupied: false,\n    };\n  }\n  occupy() {\n    console.log(`occupied: ${this.state.occupied}`);\n    this.setState({\n      occupied: !this.state.occupied,\n    });\n  }\n  render() {\n    return (\n      <div className=\"square\">\n        <div\n          onClick={() => this.occupy()}\n          className={this.state.occupied ? \"occupied\" : \"unoccupied\"}\n        >\n          {this.props.tileText}\n        </div>\n      </div>\n    );\n  }\n}\nclass BoardSetup extends Component<\n  { handleTilesTextChange: (tilesTextArr: string[]) => void },\n  { tileList: string }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      tileList: \"\",\n    };\n    this.buildBoardText = this.buildBoardText.bind(this);\n    this.handleTileTextInput = this.handleTileTextInput.bind(this);\n  }\n\n  buildBoardText() {\n    const board = this.state.tileList.split(\",\");\n    if (board.length !== 25) {\n      alert(`Bad board, board length is ${board.length}, should be 25`);\n    } else {\n      this.props.handleTilesTextChange(board);\n    }\n  }\n\n  handleTileTextInput(event: ChangeEvent<HTMLTextAreaElement>) {\n    this.setState({ tileList: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"board-setup\">\n        <h1>Setup</h1>\n        <p>Input a comma-separated list for Bingo tiles</p>\n        <textarea name=\"tilesInput\" onInput={this.handleTileTextInput} />\n        <div>\n          <button onClick={this.buildBoardText}>Setup</button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":84,"column":9,"nodeType":"25","messageId":"26","endLine":84,"endColumn":27},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"@typescript-eslint/no-unused-vars","'tileText' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]